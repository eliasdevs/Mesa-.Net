@page "/StartBlackJackPage"
@using Mesa_SV.BlackJack.Helper;
@using Mesa_SV.VoDeJuegos;
@using Newtonsoft.Json;
@using Microsoft.JSInterop
@using Fluxor.Blazor.Web.Components;
@inherits FluxorComponent
@inject IState<BlackJackSore> _store
@inject IDispatcher _dispatcher
@inject NavigationManager _nav
@inject DialogService _dialogservice
@inject IHubConnectionService _hubConnectionService
@inject IJSRuntime JSRuntime

<h3>BlackJackGame</h3>

<hr />
<br />

@if (_store.Value.Loader.IsPlayerTurn)
{
    <p>Es tu turno de Ganar</p>
}
else
{
    <p>Espera que tu contrincante te seda la baraja</p>
}

@if (_store.Value.Loader.BlackJackIsLoading)
{
        <div class="d-flex justify-content-center align-items-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
}
else
{
        <div class="greencloth">
            <div class="container">
      <div id="tapete">
        <span id="barajas-pendientes"></span>

        <div id="cartas-crupier" class="grid"></div><br>
        <div class="contentPuntaje">
          <div class="circulo">
            <div class="texto"><div id="puntaje-crupier"></div></div>
          </div>
          <div class="positionTapete">
          </div>

        </div>

        <button class="btn btn-info" id="boton-repartir">
                Reiniciar
        </button>
        <button class="btn btn-info" id="boton-plantarse" @onclick="() => OnClickPlantarse()" disabled="@(!_store.Value.Loader.IsPlayerTurn)">
                Plantarse
        </button>
        <button class="btn btn-info" id="boton-pedir-carta" @onclick="() => OnClickPedirCarta()" disabled="@(!_store.Value.Loader.IsPlayerTurn)">
            Pedir carta
        </button>
        <div id="cartas-jugador" class="grid">
                @if (!_store.Value.Loader.IsDrawCard && _store.Value.Mano != null)
                {
                    @foreach (var carta in _store.Value.Mano.Mano)
                    {
                        <card-t rank=@carta.OriginalValue suit="@(Convert.ToInt32(carta.TypeOfCardId))" class="card"></card-t>
                    }
                }
        </div>
        <div class="contentPuntaje">
          <div class="circulo">
            <div class="texto">
                <div id="puntaje-jugador">
                    @if (_store.Value.Mano != null)
                    {
                        @CalculateManoBlackJack.CalcularPuntuacion(_store.Value.Mano.Mano)    
                    }
                </div>
            </div>
          </div>
          <div class="positionTapete">
            Jugador
          </div>
        </div>
            <p>Mensaje: <span>@mensaje </span></p>    
      </div>
    </div>
        </div>
    
}
@code{
    string mensaje = "";
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    /// <summary>
    /// este recibe mi mano
    /// </summary>
    /// <param name="mano"></param>
    private void ConsultarMano(ManoJugadorVo mano)
    {
        //si la mano viene plantada consultar la mano del jugador rival para declarar ganador
        if (mano.estado == StatusHand.STAND_HAND && _store.Value.BlackjackInfo != null && _store.Value.Request != null)
        {
            string? playerId = (!_store.Value.Loader.IsChallenger) ? _store.Value.Request.PlayerId : _store.Value.Request.AcceptedPlayerId;

            //consulto la mano del jugador rival
            //ambos jugadores consultan la mano contraria
            if (playerId != null)
                _dispatcher.Dispatch(new StartGetActiveHand(_store.Value.BlackjackInfo.Id, playerId));

        }

    }

    protected override void OnInitialized()
    {
        HubConnection hubConnection = _hubConnectionService.GetHubConnection();

        // lo escuchan los dos jugadores
        hubConnection.On<ManoJugadorVo>("DrawCardResult", (mano) =>
        {   
            if (_store.Value.Loader.IsPlayerTurn)
            {
                //si es mi turno actualizo mi mano
                _dispatcher.Dispatch(new EndDrawCard(mano));
                mensaje = "Vas muy bien";
                if (mano.estado == StatusHand.STAND_HAND) _dispatcher.Dispatch(new StartChangeTurn(false));// me quita el truno
            }
            else
            {   
                //escucho la mano del rival para mi truno
                if (mano.estado == StatusHand.STAND_HAND) _dispatcher.Dispatch(new StartChangeTurn(true));// asigna el  truno
                mensaje = "Espera tu turno";                
            }

            if (mano.estado == StatusHand.STAND_HAND) ConsultarMano(mano);

        });


        //escuche la mano del contrincante
        hubConnection.On<ManoJugadorVo>("GetActiveHandResult", (mano) =>
        {
            if (mano != null && mano.Mano.Any() && mano.estado == StatusHand.STAND_HAND)
            {
                if (@CalculateManoBlackJack.CalcularPuntuacion(mano.Mano) <= 21)
                {

                    if ((@CalculateManoBlackJack.CalcularPuntuacion(_store.Value.Mano.Mano) > @CalculateManoBlackJack.CalcularPuntuacion(mano.Mano)) &&
                        (@CalculateManoBlackJack.CalcularPuntuacion(_store.Value.Mano.Mano)) <= 21)
                    {
                        mensaje = "Felcidades, Has ganado esta Jugada";
                        //le asigna el turno al jugador
                        _dispatcher.Dispatch(new StartChangeTurn(true));
                    }
                    else if ((@CalculateManoBlackJack.CalcularPuntuacion(_store.Value.Mano.Mano) == @CalculateManoBlackJack.CalcularPuntuacion(mano.Mano)) &&
                    ((@CalculateManoBlackJack.CalcularPuntuacion(_store.Value.Mano.Mano) <= 21) && (@CalculateManoBlackJack.CalcularPuntuacion(mano.Mano) <= 21)))
                    {
                        mensaje = "Empate";
                        //le quita el turno al jugador
                        _dispatcher.Dispatch(new StartChangeTurn(false));
                    }
                    else if (@CalculateManoBlackJack.CalcularPuntuacion(_store.Value.Mano.Mano) > 21 && @CalculateManoBlackJack.CalcularPuntuacion(mano.Mano) > 21)
                    {
                        mensaje = "Ninguno Gana";
                        //le quita el turno al jugador
                        _dispatcher.Dispatch(new StartChangeTurn(false));

                    }
                    else
                    {
                        _dispatcher.Dispatch(new StartChangeTurn(false));
                        mensaje = "Ups, has perdido";
                    }
                }
            }            
        });

        // escucho plantarse de ambos jugadores
        hubConnection.On<ManoJugadorVo>("StandHandResult", (mano) =>
        {
            if (_store.Value.Loader.IsPlayerTurn)
            {
                //actualiza la mono en el store del jugador que se planta 
                _dispatcher.Dispatch(new EndStandHand(mano));
                _dispatcher.Dispatch(new StartChangeTurn(false));
            }
            else
            {
                //le asigna el turno cuando el otro se planta
                _dispatcher.Dispatch(new StartChangeTurn(true));
            }

            if (mano.estado == StatusHand.STAND_HAND) ConsultarMano(mano);

        });


        base.OnInitialized();
    }

    private async Task LoadAndExecuteScriptAsync(string scriptUrl)
    {
        await JSRuntime.InvokeVoidAsync("eval", $"fetch('{scriptUrl}').then(response => response.text()).then(script => eval(script));");
    }

    protected override async Task OnInitializedAsync()
    {
        //await LoadAndExecuteScriptAsync("js/cardmjs/elements.cardmeister.min.js");
        //await LoadAndExecuteScriptAsync("js/script.js");
    }

    private void OnClickPedirCarta()
    {
        if (_store.Value.BlackjackInfo != null && _store.Value.Request != null)
        {
            string playerId = "";
            if (_store.Value.Loader.IsChallenger)
            {
                //si es retador seteo los datos con el id del retador
                playerId = _store.Value.Request.PlayerId;
            }
            else
            {
                if (!string.IsNullOrEmpty(_store.Value.Request.AcceptedPlayerId))
                {
                    playerId = _store.Value.Request.AcceptedPlayerId;                    
                }                
            }

            if (!string.IsNullOrEmpty(playerId))
                _dispatcher.Dispatch(new StartDrawCard(playerId, _store.Value.BlackjackInfo.Id, _store.Value.BlackjackInfo.IdRequest));
        }

    }

    private void OnClickPlantarse()
    {
        if (_store.Value.BlackjackInfo != null && _store.Value.Request != null)
        {
            if (_store.Value.Loader.IsChallenger)
            {
                //si es retador seteo los datos con el id del retador
                _dispatcher.Dispatch(new StartStandHand(_store.Value.BlackjackInfo.Id,_store.Value.Request.PlayerId, _store.Value.BlackjackInfo.IdRequest));

            }
            else
            {
                if (!string.IsNullOrEmpty(_store.Value.Request.AcceptedPlayerId))
                {
                    _dispatcher.Dispatch(new StartStandHand(_store.Value.BlackjackInfo.Id, _store.Value.Request.AcceptedPlayerId, _store.Value.BlackjackInfo.IdRequest));
                }
            }
        }        
    }

}