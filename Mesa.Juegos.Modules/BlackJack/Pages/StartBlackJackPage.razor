@page "/StartBlackJackPage"
@using Newtonsoft.Json;
@using Microsoft.JSInterop
@using Fluxor.Blazor.Web.Components;
@inherits FluxorComponent
@inject IState<BlackJackSore> _store
@inject IDispatcher _dispatcher
@inject NavigationManager _nav
@inject DialogService _dialogservice
@inject IHubConnectionService _hubConnectionService
<link rel="stylesheet" href="css/style.css"/>
@inject IJSRuntime JSRuntime

<h3>BlackJackGame</h3>

<hr />
<br />
@if (_store.Value.Loader.BlackJackIsLoading)
{
        <div class="d-flex justify-content-center align-items-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
}
else
{
    <div class="container">
      <div id="tapete" style="background-image: url('images/tapeteCartas.jpg');">
        <span id="barajas-pendientes"></span>

        <div id="cartas-crupier" class="grid"></div><br>
        <div class="contentPuntaje">
          <div class="circulo">
            <div class="texto"><div id="puntaje-crupier"></div></div>
          </div>
          <div class="positionTapete">
            Jugador
          </div>

        </div>

        <button class="btn btn-info" id="boton-repartir">Repartir</button>
        <button class="btn btn-info" id="boton-plantarse">Plantarse</button>
        <button class="btn btn-info" id="boton-pedir-carta">Pedir carta</button>
        <div id="cartas-jugador" class="grid"></div>
        <div class="contentPuntaje">
          <div class="circulo">
            <div class="texto"><div id="puntaje-jugador"></div></div>
          </div>
          <div class="positionTapete">
            Jugador
          </div>
        </div>
        <p>Mensaje: <span id="mensaje"></span></p>    
      </div>
    </div>
}
@code{
    protected override void OnParametersSet()
    {
        

        base.OnParametersSet();
    }
    
    protected override void OnInitialized()
    {
        HubConnection hubConnection = _hubConnectionService.GetHubConnection();

        

        base.OnInitialized();
    }

    private async Task LoadAndExecuteScriptAsync(string scriptUrl)
    {
        await JSRuntime.InvokeVoidAsync("eval", $"fetch('{scriptUrl}').then(response => response.text()).then(script => eval(script));");
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAndExecuteScriptAsync("js/cardmjs/elements.cardmeister.min.js");
        await LoadAndExecuteScriptAsync("js/script.js");
    }

}