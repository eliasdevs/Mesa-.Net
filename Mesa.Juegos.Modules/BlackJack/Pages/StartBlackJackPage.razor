@page "/StartBlackJackPage"
@using Mesa_SV.VoDeJuegos;
@using Newtonsoft.Json;
@using Microsoft.JSInterop
@using Fluxor.Blazor.Web.Components;
@inherits FluxorComponent
@inject IState<BlackJackSore> _store
@inject IDispatcher _dispatcher
@inject NavigationManager _nav
@inject DialogService _dialogservice
@inject IHubConnectionService _hubConnectionService
<link rel="stylesheet" href="css/style.css"/>
@inject IJSRuntime JSRuntime

<h3>BlackJackGame</h3>

<hr />
<br />
@if (_store.Value.Loader.BlackJackIsLoading)
{
        <div class="d-flex justify-content-center align-items-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
}
else
{
    <div class="container">
      <div id="tapete" style="background-image: url('images/tapeteCartas.jpg');">
        <span id="barajas-pendientes"></span>

        <div id="cartas-crupier" class="grid"></div><br>
        <div class="contentPuntaje">
          <div class="circulo">
            <div class="texto"><div id="puntaje-crupier"></div></div>
          </div>
          <div class="positionTapete">
            Jugador
          </div>

        </div>

        <button class="btn btn-info" id="boton-repartir">
                Repartir
        </button>
                <button class="btn btn-info" id="boton-plantarse" @onclick="() => OnClickPlantarse()" disabled="@(!_store.Value.Loader.IsPlayerTurn)">
                Plantarse
        </button>
            <button class="btn btn-info" id="boton-pedir-carta" @onclick="() => OnClickPedirCarta()" disabled="@(!_store.Value.Loader.IsPlayerTurn)">
            Pedir carta
        </button>
        <div id="cartas-jugador" class="grid">
                @if (!_store.Value.Loader.IsDrawCard && _store.Value.Mano != null)
                {
                    @foreach (var carta in _store.Value.Mano.Mano)
                    {
                        <card-t rank="@carta.Representation" suit="@carta.TypeOfCardId" class="card"></card-t>                        
                    }
                }
                
        </div>
        <div class="contentPuntaje">
          <div class="circulo">
            <div class="texto"><div id="puntaje-jugador"></div></div>
          </div>
          <div class="positionTapete">
            Jugador
          </div>
        </div>
        <p>Mensaje: <span id="mensaje"></span></p>    
      </div>
    </div>
}
@code{
    protected override void OnParametersSet()
    {


        base.OnParametersSet();
    }

    protected override void OnInitialized()
    {
        HubConnection hubConnection = _hubConnectionService.GetHubConnection();

        // escucho PedirCarta
        hubConnection.On<ManoJugadorVo>("DrawCardResult", (mano) =>
        {
            _dispatcher.Dispatch(new EndDrawCard(mano));
        });

        // escucho plantarse de ambos jugadores
        hubConnection.On<ManoJugadorVo>("StandHandResult", (mano) =>
        {
            if (_store.Value.Loader.IsPlayerTurn)
            {
                //actualiza la mono en el store del jugador que se planta 
                _dispatcher.Dispatch(new EndStandHand(mano));

                //le quita el turno al jugador
                _dispatcher.Dispatch(new StartChangeTurn(false));
            }
            else
            {
                //le asigna el truno cuando el otro se planta
                _dispatcher.Dispatch(new StartChangeTurn(true));
            }

        });

        // escucho La mano activa del jugador rival
        hubConnection.On<ManoJugadorVo>("GetActiveHandResult", (mano) =>
        {
            //_dispatcher.Dispatch(new EndStandHand(mano));
        });


        base.OnInitialized();
    }

    private async Task LoadAndExecuteScriptAsync(string scriptUrl)
    {
        await JSRuntime.InvokeVoidAsync("eval", $"fetch('{scriptUrl}').then(response => response.text()).then(script => eval(script));");
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAndExecuteScriptAsync("js/cardmjs/elements.cardmeister.min.js");
        //await LoadAndExecuteScriptAsync("js/script.js");
    }

    private void OnClickPedirCarta()
    {
        if (_store.Value.BlackjackInfo != null && _store.Value.Request != null)
        {
            if (_store.Value.Loader.IsChallenger)
            {
                //si es retador seteo los datos con el id del retador
                _dispatcher.Dispatch(new StartDrawCard(_store.Value.Request.PlayerId, _store.Value.BlackjackInfo.Id));

            }
            else
            {
                if (!string.IsNullOrEmpty(_store.Value.Request.AcceptedPlayerId))
                {
                    _dispatcher.Dispatch(new StartDrawCard(_store.Value.Request.AcceptedPlayerId, _store.Value.BlackjackInfo.Id));
                }                
            }
        }

    }

    private void OnClickPlantarse()
    {
        if (_store.Value.BlackjackInfo != null && _store.Value.Request != null)
        {
            if (_store.Value.Loader.IsChallenger)
            {
                //si es retador seteo los datos con el id del retador
                _dispatcher.Dispatch(new StartStandHand(_store.Value.BlackjackInfo.Id,_store.Value.Request.PlayerId, _store.Value.BlackjackInfo.IdRequest));

            }
            else
            {
                if (!string.IsNullOrEmpty(_store.Value.Request.AcceptedPlayerId))
                {
                    _dispatcher.Dispatch(new StartStandHand(_store.Value.BlackjackInfo.Id, _store.Value.Request.AcceptedPlayerId, _store.Value.BlackjackInfo.IdRequest));
                }
            }
        }        
    }

}