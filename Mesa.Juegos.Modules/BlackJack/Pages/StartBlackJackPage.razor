@page "/StartBlackJackPage"
@using Mesa_SV.BlackJack.Helper;
@using Mesa_SV.VoDeJuegos;
@using Newtonsoft.Json;
@using Microsoft.JSInterop
@using Fluxor.Blazor.Web.Components;
@inherits FluxorComponent
@inject IState<BlackJackSore> _store
@inject IDispatcher _dispatcher
@inject NavigationManager _nav
@inject DialogService _dialogservice
@inject IHubConnectionService _hubConnectionService
@inject IJSRuntime JSRuntime

<h3>BlackJackGame</h3>

<hr />
<br />

@if (_store.Value.Loader.IsPlayerTurn)
{
    <p>Es tu turno de Ganar</p>
}
else
{
    <p>Espera que tu contrincante te seda la baraja</p>    
}
<p style="color: green">Mensaje: <span>@mensajeResultado  </span></p>    
@if (_store.Value.Loader.BlackJackIsLoading)
{
        <div class="d-flex justify-content-center align-items-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
}
else
{
        <div class="greencloth">
            
        <div id="tapete" style="background-image: url('images/tapeteCartas.jpg')">
        
            <div id="cartas-crupier" class="grid">
                    @if (manoContrincante != null && _store.Value.Mano != null && _store.Value.Mano.Estado == StatusHand.STAND_HAND)
                    {
                        @foreach (var carta in manoContrincante.Mano)
                        {
                           <card-t rank=@carta.OriginalValue suit="@(Convert.ToInt32(carta.TypeOfCardId))" class="card"></card-t>
                        }
                    }
            </div>
        <br>
        <div class="contentPuntaje">
          <div class="circulo">
            <div class="texto">
                <div id="puntaje-crupier">
                 
                 @if (manoContrincante != null)
                 {
                     @CalculateManoBlackJack.CalcularPuntuacion(manoContrincante.Mano)    
                 }
                </div>
            </div>
          </div>
          <div class="positionTapete">
          </div>

        </div>

        <button class="btn btn-info" @onclick="() => OnClickReinicarMano()" disabled="@(!_store.Value.Loader.IsPlayerTurn && ValidButton())">
                Reiniciar
        </button>
        <button class="btn btn-info" id="boton-plantarse" @onclick="() => OnClickPlantarse()" disabled="@(!_store.Value.Loader.IsPlayerTurn || ValidButton())">
                Plantarse
        </button>
        <button class="btn btn-info" id="boton-pedir-carta" @onclick="() => OnClickPedirCarta()" disabled="@(!_store.Value.Loader.IsPlayerTurn || ValidButton())">
            Pedir carta
        </button>
        <div id="cartas-jugador" class="grid">
                @if (!_store.Value.Loader.IsDrawCard && _store.Value.Mano != null)
                {
                    @foreach (var carta in _store.Value.Mano.Mano)
                    {
                       <card-t rank=@carta.OriginalValue suit="@(Convert.ToInt32(carta.TypeOfCardId))" class="card"></card-t>
                    }
                }
                else if (_store.Value.Loader.IsDrawCard)
                {
                  <div class="d-flex justify-content-center align-items-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Cargando cartas...</span>
                    </div>
                  </div>                        
                }
        </div>
        <div class="contentPuntaje">
          <div class="circulo">
            <div class="texto">
                <div id="puntaje-jugador">
                    @if (_store.Value.Mano != null)
                    {
                        @CalculateManoBlackJack.CalcularPuntuacion(_store.Value.Mano.Mano)    
                    }
                </div>
            </div>
          </div>
          <div class="positionTapete">
            Jugador
          </div>
        </div>
            
      </div>
    
        </div>
    
}
@code{
    private bool ValidButton()
    {
        return (_store.Value.Mano != null && _store.Value.Mano.Estado == StatusHand.STAND_HAND);
    }

    string mensajeResultado = "";
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    ManoJugadorVo? manoContrincante = null;

    private void CalcularGanador(ManoJugadorVo manoRival)
    {
        if (manoRival == null || manoRival.Estado != StatusHand.STAND_HAND)
            return;

        if (_store.Value.Mano == null || _store.Value.Mano.Estado != StatusHand.STAND_HAND)
            return;

        var miMano = _store.Value.Mano;

        int puntuacionMiMano = CalculateManoBlackJack.CalcularPuntuacion(miMano.Mano);
        int puntuacionManoRival = CalculateManoBlackJack.CalcularPuntuacion(manoRival.Mano);

        mensajeResultado = "Evaluado resultados"; // Inicializar el mensaje de resultado

        if (puntuacionManoRival <= 21)
        {
            if (puntuacionMiMano > puntuacionManoRival && puntuacionMiMano <= 21)
            {
                mensajeResultado = "¡Felicitaciones, has ganado esta jugada!";
                _dispatcher.Dispatch(new StartChangeTurn("", true));
            }
            else if (puntuacionMiMano == puntuacionManoRival)
            {
                if (puntuacionMiMano <= 21)
                {
                    mensajeResultado = "Empate";
                }
                else
                {
                    mensajeResultado = "Ninguno Gana";
                }
            }
            else if (puntuacionMiMano > 21 && puntuacionManoRival > 21)
            {
                mensajeResultado = "Ninguno Gana";
            }
            else
            {
                _dispatcher.Dispatch(new StartChangeTurn("", true));
                mensajeResultado = "Ups, has perdido";
            }
        }
        else
        {
            mensajeResultado = "¡Felicitaciones, has ganado esta jugada!"; // El rival se pasó de 21
            _dispatcher.Dispatch(new StartChangeTurn("", true));
        }
    }



    protected override void OnInitialized()
    {
        HubConnection hubConnection = _hubConnectionService.GetHubConnection();

        //escuche la mano del contrincante
        hubConnection.On<ManoJugadorVo>("GetActiveHandResult", (mano) =>
        {   
            manoContrincante = mano;
            _dispatcher.Dispatch(new EndGetActiveHand(mano));
            CalcularGanador(mano);
        });

        //recibo cuando es mi turno
        hubConnection.On<bool>("IsMyTurn", (isMyTurn) =>
        {
            if (_store.Value.BlackjackInfo != null)
                _dispatcher.Dispatch(new StartChangeTurn("", isMyTurn));// me asigna el turno
        });

        //lo escuchan los dos jugadores
        hubConnection.On<string>("InDrawCardStandHand", (mnsj) =>
        {
            manoContrincante = null;
            //despachar y escuchar la mano del contrincante
            if (_store.Value.BlackjackInfo != null && _store.Value.Request != null)
            {
                if (_store.Value.Loader.IsChallenger && !string.IsNullOrEmpty(_store.Value.Request.AcceptedPlayerId))
                    _dispatcher.Dispatch(new StartGetActiveHand(_store.Value.BlackjackInfo.Id, _store.Value.Request.AcceptedPlayerId));
                else
                    _dispatcher.Dispatch(new StartGetActiveHand(_store.Value.BlackjackInfo.Id, _store.Value.Request.PlayerId));
            }                
        });

        //recibo una mi mano cada que pido carta
        hubConnection.On<ManoJugadorVo>("DrawCardResult", (mano) =>
        {   
            _dispatcher.Dispatch(new EndDrawCard(mano));

            mensajeResultado = "Vas muy bien";

            if (mano.Estado == StatusHand.STAND_HAND)
            {
                if (_store.Value.BlackjackInfo != null)
                    _dispatcher.Dispatch(new StartChangeTurn(_store.Value.BlackjackInfo.IdRequest, false));// mequito el truno
            }
        });

        //reinicio mi mano
        hubConnection.On<ManoJugadorVo>("ResetHandResult", (mano) =>
        {
            _dispatcher.Dispatch(new EndResetHand(mano));          
        });

        // escucho y recibo mi mano plantada
        hubConnection.On<ManoJugadorVo>("StandHandResult", (mano) =>
        {   
            _dispatcher.Dispatch(new EndStandHand(mano));

            if (_store.Value.BlackjackInfo != null)
                _dispatcher.Dispatch(new StartChangeTurn(_store.Value.BlackjackInfo.IdRequest, false));// mequito el truno

        });


        base.OnInitialized();
    }

    private void OnClickPedirCarta()
    {
        if (_store.Value.BlackjackInfo != null && _store.Value.Request != null)
        {
            string playerId = "";
            if (_store.Value.Loader.IsChallenger)
            {
                //si es retador seteo los datos con el id del retador
                playerId = _store.Value.Request.PlayerId;
            }
            else
            {
                if (!string.IsNullOrEmpty(_store.Value.Request.AcceptedPlayerId))
                {
                    playerId = _store.Value.Request.AcceptedPlayerId;                    
                }                
            }

            if (!string.IsNullOrEmpty(playerId))
                _dispatcher.Dispatch(new StartDrawCard(playerId, _store.Value.BlackjackInfo.Id, _store.Value.BlackjackInfo.IdRequest));
        }

    }

    private void OnClickPlantarse()
    {
        if (_store.Value.BlackjackInfo != null && _store.Value.Request != null)
        {
            if (_store.Value.Loader.IsChallenger)
            {
                //si es retador seteo los datos con el id del retador
                _dispatcher.Dispatch(new StartStandHand(_store.Value.BlackjackInfo.Id,_store.Value.Request.PlayerId, _store.Value.BlackjackInfo.IdRequest));

            }
            else
            {
                if (!string.IsNullOrEmpty(_store.Value.Request.AcceptedPlayerId))
                {
                    _dispatcher.Dispatch(new StartStandHand(_store.Value.BlackjackInfo.Id, _store.Value.Request.AcceptedPlayerId, _store.Value.BlackjackInfo.IdRequest));
                }
            }
        }        
    }

    private void OnClickReinicarMano()
    {
        manoContrincante = null;
        if (_store.Value.BlackjackInfo != null && _store.Value.Request != null)
        {
            if (_store.Value.Loader.IsChallenger)
            {
                //si es retador seteo los datos con el id del retador
                _dispatcher.Dispatch(new StartResetHand(_store.Value.BlackjackInfo.Id, _store.Value.Request.PlayerId));
            }
            else
            {
                if (!string.IsNullOrEmpty(_store.Value.Request.AcceptedPlayerId))
                {
                    _dispatcher.Dispatch(new StartResetHand(_store.Value.BlackjackInfo.Id, _store.Value.Request.AcceptedPlayerId));
                }
            }
        }
    }
}