@page "/requests-list"

@using Fluxor.Blazor.Web.Components
@using Mesa.Juegos.Modules.BlackJack.Models;
@using Mesa.Juegos.State.Actions.Blackjacks;
@using Mesa.TimeReal.Services;
@using Mesa_SV;
@using Mesa_SV.BlackJack.Dtos.Output;
@using Microsoft.AspNetCore.Components.Forms
@using Mesa.Juegos.State.States
@using Microsoft.AspNetCore.SignalR.Client;
@using Newtonsoft.Json;
@inherits FluxorComponent
@inject IState<BlackJackSore> _store
@inject IDispatcher _dispatcher
@inject NavigationManager _nav
@inject IHubConnectionService _hubConnectionService

<h3>Lista de Solicitudes</h3>

<EditForm Model="@ModelCreate" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator/>     
    <InputText @bind-Value="@ModelCreate.PlayerId" placeholder="Id del jugador"></InputText>
    <ValidationMessage For="()=> ModelCreate.PlayerId"></ValidationMessage>

    <br />

    <InputSelect @bind-Value="@ModelCreate.TypeGame">
        <option value="" disabled selected>Selecciona Tipo de Juego</option>
        @foreach (var value in Enum.GetValues(typeof(TypeGame)))
        {
                <option value="@value">@value</option>
        }
    </InputSelect>    
    <ValidationMessage For="()=> ModelCreate.TypeGame"></ValidationMessage>

    <button type="submit" disabled="@(!IsConnected)">Crear Solicitud</button>
</EditForm>
<hr />
<br />
@if (_store.Value.Loader.RequestIsLoading)
{
        <div class="d-flex justify-content-center align-items-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
}
else
{
    <div class="container">
         <div class="row row-cols-1 row-cols-md-3">
    @foreach (var solicitud in _store.Value.BlackJackRequests)
    {
        <div class="col-12 col-md-4">
            <div class="card" style="width: 18rem;">
                <img src="images/blackJack.png" class="card-img-top" alt="...">
                <div class="card-body">
                    <h5 class="card-title">@solicitud.PlayerId</h5>
                    <p class="card-text">@solicitud.Id</p>
                    <a href="#" class="btn btn-primary">Aceptar Solicitud</a>
                </div>
            </div>
        </div>
    }
        </div>
    </div>
}
@code{
    public CreateRequestVm ModelCreate = new CreateRequestVm();

    public bool IsConnected = false;

    protected override void OnParametersSet()
    {
        _dispatcher.Dispatch(new StartGetAllRequest());

        base.OnParametersSet();
    }

    protected override void OnInitialized()
    {
        HubConnection hubConnection = _hubConnectionService.GetHubConnection();

        // Manejar el evento OnConnected antes de iniciar la conexión                
        hubConnection.On<List<GameRequestBackJackOutput>>("GetAllRequests", (requests) =>
        {
            IsConnected = hubConnection?.State == HubConnectionState.Connected;
            _dispatcher.Dispatch(new EndGetAllRequest(requests));
        
            GameRequestBackJackOutput? newRequest = requests.FirstOrDefault(x => x.PlayerId == ModelCreate.PlayerId && x.Status == GameRequestStatus.Pending);

            if (newRequest != null)
            {
                _dispatcher.Dispatch(new EndCreateRequest(newRequest));
            }    
        });

        ///await hubConnection.StartAsync(); 

        base.OnInitialized();
    }

    /// <summary>
    /// este puede tener otro nombre
    /// </summary>
    private void OnValidSubmit()
    {
        _dispatcher.Dispatch(new StartCreateRequest(ModelCreate.PlayerId, ModelCreate.TypeGame));
    }
}