@page "/requests-list"
@using Newtonsoft.Json;
@using Fluxor.Blazor.Web.Components;
@inherits FluxorComponent
@inject IState<BlackJackSore> _store
@inject IDispatcher _dispatcher
@inject NavigationManager _nav
@inject DialogService _dialogservice
@inject IHubConnectionService _hubConnectionService
<h3>Lista de Solicitudes</h3>

<button @onclick="() => OnClickCreateRequest()" disabled="@(!IsConnected)">
    Crear Solicitud
</button>

<hr />
<br />
@if (_store.Value.Loader.RequestIsLoading)
{
        <div class="d-flex justify-content-center align-items-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
}
else
{
    <div class="container">
         <div class="row row-cols-1 row-cols-md-3">
    @foreach (var solicitud in _store.Value.BlackJackRequests)
    {
        <div class="col-12 col-md-4">
            <div class="card" style="width: 18rem;">
                <img src="images/blackJack.png" class="card-img-top" alt="...">
                <div class="card-body">
                    <h5 class="card-title">@solicitud.PlayerId</h5>
                    <p class="card-text">@solicitud.Id</p>
                    <button class="btn btn-primary" @onclick="() => OnClickAcceptRequest(solicitud)" disabled="@(!IsConnected)">
                          Aceptar Solicitud
                    </button>                    
                </div>
            </div>
        </div>
    }
        </div>
    </div>
}
@code{

    public bool IsConnected = false;

    protected override void OnParametersSet()
    {
        _dispatcher.Dispatch(new StartGetAllRequest());

        base.OnParametersSet();
    }

    protected override void OnInitialized()
    {
        HubConnection hubConnection = _hubConnectionService.GetHubConnection();

        // escucho la lista completa de request
        hubConnection.On<List<GameRequestBackJackOutput>>("GetAllRequests", (requests) =>
        {
            IsConnected = hubConnection?.State == HubConnectionState.Connected;
            _dispatcher.Dispatch(new EndGetAllRequest(requests));

        });

        // escucho la request cuando ya ha sido aceptada
        hubConnection.On<GameRequestBackJackOutput>("AcceptRequestResult", (requests) =>
        {   
            //actualizo esta propiedad del store
            _dispatcher.Dispatch(new EndAcceptRequest(requests));

            //mando a crear el blackJack, lo ejecuta el jugador que acepta la request            
            if (_store.Value.Loader.IsChallenger == false)
                _dispatcher.Dispatch(new StartCreateBlackJack(requests.Id));

            //redirecciona a la pagina donde se va jugar blackJack
            _nav.NavigateTo("/StartBlackJackPage");

        });

        // escucho la creacion del blackJack
        hubConnection.On<BlackjackStartOutput>("StartBlackJackResult", (blackJack) =>
        {
            //mando a crear el blackJack
            _dispatcher.Dispatch(new EndCreateBlackJack(blackJack));

            //redirecciona a la pagina donde se va jugar blackJack
            _nav.NavigateTo("/StartBlackJackPage");

        });

        base.OnInitialized();
    }

    /// <summary>
    /// este metodo permite aceptar una solicitud creada por otro usuario
    /// </summary>
    /// <param name="request"></param>
    /// <returns></returns>
    private void OnClickAcceptRequest(GameRequestBackJackOutput request)
    {
        string userId = "UserIdAccept"; //cuando se defina  de donde saldra se tomara de alli

        _dispatcher.Dispatch(new StartAcceptRequest(userId , request.Id));
    }

    private async Task OnClickCreateRequest()
    {
            await _dialogservice.OpenAsync<CrearSolicitud>($"Crear Solicitud de BlackJack",
               new Dictionary<string, object>() { },
               new DialogOptions() { Width = "700px", Height = "512px", Resizable = true, Draggable = true });        
    }

}